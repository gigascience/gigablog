#!/bin/bash
# Creates backup files for GigaBlog and uploads them into S3.

# Exit when a command fails
set -o errexit
# Exit when undeclared variables are used
set -o nounset
# Trace what gets executed
set -o xtrace

main() {
	BACKUP_DIR="<%= node[:gigablog][:vagrant_dir] %>/backups"
    S3_PREFIX="s3://gigablog-backups/"
    ROOT_MYSQL_PASSWORD="<%= node[:wordpress][:db][:root_password] %>"
    WORDPRESS_MYSQL_DBNAME="<%= node[:wordpress][:db][:name] %>"
    WORDPRESS_EXISTS=0
    BACKUP_DIR_EXISTS=0

	WORDPRESS_DIR=$1
	if [ -d "$WORDPRESS_DIR" ]
	then
    	WORDPRESS_EXISTS=0
	else
		WORDPRESS_EXISTS=1
		echo "WordPress directory does not exist."
		exit
	fi

	if [ -d "$BACKUP_DIR" ]
	then
		BACKUP_DIR_EXISTS=0
	else
		BACKUP_DIR_EXISTS=1
		echo "Backup directory does not exist."
		echo "Creating " $BACKUP_DIR
		mkdir --parents $BACKUP_DIR
		chown --recursive root:root $BACKUP_DIR
	fi

	# Create name for SQL file
    sql_filename=$BACKUP_DIR"/"$(date +%Y%m%d)"_gigablog_wp_db.sql"
    s3_sql_filename=$S3_PREFIX$(date +%Y%m%d)".sql"

    # Generate database SQL dump
    mysqldump --user root --password=$ROOT_MYSQL_PASSWORD $WORDPRESS_MYSQL_DBNAME > $sql_filename

    # Create zipped tarball backup of wordpress directory
    zip_filename=$BACKUP_DIR"/"$(date +%Y%m%d)"_gigablog_wp.tar.gz"
    s3_wp_filename=$S3_PREFIX$(date +%Y%m%d)"_gigablog_wp.tar.gz"
    cd $WORDPRESS_DIR
    cd ..
    tar -czf $zip_filename wordpress

    # Copy backup file to S3 and log output and errors
    /usr/local/bin/aws s3 cp $sql_filename $s3_sql_filename >> /vagrant/log/aws.log 2>&1

    # Copy database backup file to S3 and log output and errors
    /usr/local/bin/aws s3 cp $zip_filename $s3_wp_filename >> /vagrant/log/aws.log 2>&1
}

# Call main function and use "$@" to access cmd-line args
main "$@"